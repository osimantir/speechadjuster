#######################################################
## Configuration file of the SpeechAdjuster tool.
## The user can change the values of several parameters
## for adapting the tool to the experiment's needs.
#######################################################
#######################################################
## Author: Olympia Simantiraki
## License: GNU GPL v3
## Version: v1.0.0
## Email: olina.simantiraki@gmail.com
#######################################################

[instructions]
# instructionstxt, btnstart, adjarrowstxt, adjknobtxt, btntxt, testparttxt, uplimtxt, lowlimtxt, blktxt, endtxt (strings):
# Text presented in different parts of the GUI.
# instructionstxt: Instructions to the listener.
instructionstxt = You are asked to tune the speech in real-time until you can recognise as many words as possible. Real-time changes can be made by using the up/down keys (or the virtual knob) while listening to speech. The task is akin to choosing an appropriate volume for a television (or a radio): too quiet makes comprehension difficult, while too loud leads to discomfort.
# btnstart: Text on button in instructions screen.
btnstart = START
# adjarrowstxt: Text presented in the adjustment phase when arrows option is selected.
adjarrowstxt = Use the arrows to adjust the speech
# adjknobtxt: Text presented in the adjustment phase when knob option is selected.
adjknobtxt = Use the knob to adjust the speech
# btntxt: Text on button in the adjustment phase.
btntxt = Finished adjusting?
# testparttxt: Text presented in the test phase.
testparttxt =  Type out the phrase:
# uplimtxt: Text for informing the listener that the upper extreme level has been reached (for the up/down arrows option).
uplimtxt = upper limit reached
# lowlimtxt: Text for informing the listener that the lower extreme level has been reached (for the up/down arrows option).
lowlimtxt = lower limit reached
# blktxt: Text presented in the instructions screen (only if more than one block exist).
blktxt = Block
# endtxt: Text in the last screen once the experiment is ended.
endtxt = Thank you!!!
# exittime: Time delay (in seconds) from endtxt message presentation until application exit.
exittime = 2
# directory (string): Full path to save the tool's output.
directory =


[stimuli]
# prefix (string): Prefix of the folders' name which contains the target speech stimuli.
prefix = level_

# taudioCHUNK (float): chunk size (in seconds) of target speech streaming. Change the size ONLY IF when tuning the target speech the audio sounds choppy/distorted.
# If size too big, changes with the controller will sound delayed and ending parts of the phrases might be lost. It should be positive, otherwise an error will be thrown.
# Default value is 0.1 seconds.
audiochunk = 0.1

# maskerCHUNK (float): chunk size (in seconds) of masker streaming. If size too big, ending parts of the masker might be lost. Change the size ONLY IF masker
# sounds choppy/distorted. It should be positive, otherwise an error will be thrown. Default value is 0.1 seconds.
maskerchunk = 0.1

[setup_adj]
# knob (boolean): Type of speech feature controller. If True, the controller is a knob otherwise the up/down key arrows.
knob = True

# numOftrials (integer): Number of trials in each block. It should be positive, otherwise an error will be thrown.
numOftrials = 1

# audio_on (float): Time delay (in seconds) from the onset of the trial until the presentation of the audio stimuli (both target speech and masker) starts in the adjustment phase.
# It should be positive, otherwise an error will be thrown.
audio_on = 0.5

# button_on (float): Time delay (in seconds) from the onset of the trial until the activation of the button for quitting the adjustment phase. It should be greater than or equal to the *audio_on*.
# It should be positive, otherwise an error will be thrown.
button_on = 5

# gap (float): Gap (in seconds) between the phrases in the adjustment phase. It should be positive, otherwise an error will be thrown.
gap = 0.5

# saveaudio (boolean): ï»¿ If True, the target speech during the tuning will be stored in a file called 'audio_tuning.wav'.
saveaudio = False

[setup_test]
# numOftesting (integer): Number of phrases to be tested in each trial. It should be positive, otherwise an error will be thrown.
numOftesting = 1

# test1audio (float): Time delay (in seconds) from button press in adjustment phase until the audio starts in the test phase. It should be positive, otherwise an error will be thrown.
test1audio = 2

# testaudio (float): Time delay (in seconds) from *ENTER* key press in test phase until the audio of next sentence starts. It should be positive, otherwise an error will be thrown.
testaudio = 0.5

# speech_on (float): Time delay (in seconds) from the onset of the masker until the target speech starts in the test phase. This parameter applies only if masker is present.
# It should be positive, otherwise an error will be thrown.
speech_on = 0.5
